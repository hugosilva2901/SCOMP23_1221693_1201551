synchronization pattern: synchronization of execution
(semaphore; a initialized at 1)

Define constants for maximum number of readers and shared memory key
Define a structure for shared memory with a string and an integer for the number of readers
Declare shared memory and semaphore pointers
Define a reader function that takes an integer id as an argument
In the reader function:
    Wait for 1 second
    Wait on the semaphore
    Print the id, string, and number of readers from shared memory
    Increment the number of readers in shared memory
    Post to the semaphore
In the main function:
    Open a shared memory object with name “/shared_mem” and size of the shared memory structure using shm_open.
    If shm_open returns -1, print an error message and exit with status 1.
    Map the shared memory object into the process’s address space using mmap.
    If mmap returns MAP_FAILED, print an error message and exit with status 1.
    Open a semaphore with name “/mutex” and initial value 1 using sem_open.
    If sem_open returns SEM_FAILED, print an error message and exit with status 1.
    Loop MAX_READERS times:
        Fork a new process
        In the child process, call the reader function with the loop index as an argument and exit
    Loop MAX_READERS times:
        Wait for a child process to exit
        If wait returns -1, print an error message and exit with status 1
    Close the semaphore
    Unlink the semaphore with name "/mutex"
Return 0 from main function.